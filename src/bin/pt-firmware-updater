#!/usr/bin/python3
from argparse import ArgumentParser
from os import geteuid
from sys import path

from ptcommon.common_ids import DeviceID
from ptcommon.firmware_device import FirmwareDevice
from ptcommon.logger import PTLogger
from ptcommon.sys_info import get_host_device_version

path.append("/usr/lib/pt-firmware-updater/")
import pt_firmware_updater

parser = ArgumentParser(description="pi-top firmware updater")
parser.add_argument(
    "device",
    help="pi-top firmware device to apply firmware update to. "
         "Valid devices are {}".format([dev.name for dev in FirmwareDevice.valid_device_ids()]),
)
parser.add_argument(
    "--no-journal",
    help="Prints output to stdout instead of journal.",
    action="store_true"
)
parser.add_argument(
    "-f",
    "--force",
    help="Skip internal checks of fw file",
    action="store_true"
)
parser.add_argument(
    "--log-level",
    type=int,
    help="Set the logging level from 10 (more verbose) to 50 (less verbose).",
    default=20,
)
parser.add_argument(
    "-i",
    "--interval",
    type=float,
    help="Set the interval speed at which packages will be sent to the device "
         "during an update.",
    default=0.1
)
parser.add_argument(
    "-p",
    "--path",
    type=str,
    help="Path to the binary file to install. If not provided, updates will be "
         "searched in system folders",
    default="",
    required=True
)
parser.add_argument(
    "-n",
    "--notify-user",
    help="Make update interactive by displaying desktop notifcations to the user",
    action="store_true"
)


def is_root() -> bool:
    return geteuid() == 0


if __name__ == '__main__':
    if get_host_device_version() != DeviceID.pi_top_4.name:
        PTLogger.error("This program only runs on a pi-top[4]")
        exit(1)

    if not is_root():
        PTLogger.error("This program requires root privileges. Run as root using 'sudo'.")
        exit(1)

    parsed_args = parser.parse_args()
    try:
        pt_firmware_updater.main(parsed_args)
    except Exception as e:
        PTLogger.error(f"{e}")
        exit(1)
