#!/usr/bin/python3

import os
from argparse import ArgumentParser
from sys import exit
from sys import path

path.append("/usr/lib/pt-firmware-updater/")
from ptcommon.firmware_device import FirmwareDevice
from ptcommon.common_ids import FirmwareDeviceID
from ptcommon.logger import PTLogger
from firmware_updater import FirmwareUpdater


DEFAULT_INTERVAL_SPEED = 0.1


parser = ArgumentParser(description="pi-top firmware update checker")
parser.add_argument(
    "-a",
    "--all",
    action="store_true",
    help="Find all connected pi-top devices, and apply firmware upgrades "
         "if necessary",
)
parser.add_argument(
    "-d",
    "--device",
    type=str,
    help="Define specific pi-top firmware device to attempt to apply firmware"
         " upgrade to. This option is ignored if -a flag is used. "
         "Receives only one device name.",
    required=False
)
parser.add_argument(
    "--no-journal",
    help="Prints output to stdout instead of journal.",
    action="store_true"
)
parser.add_argument(
    "--log-level",
    type=int,
    help="Set the logging level from 10 (more verbose) to 50 (less verbose).",
    default=20,
)


def is_root():
    return os.geteuid() == 0


def get_devices_to_update(all_devices, one_device):
    """
    Retrieves the list of devices to update, for the particular set of arguments
    received. The all_devices parameter takes precedence to one_device.
    :param all_devices: if True, returns a list of all firmware devices.
    :param one_device: a particular firmware device name.
    :return: list with devices to update.
    """
    devices = [d.name for d in FirmwareDeviceID
               if d.value in FirmwareDevice.valid_device_ids()]
    if all_devices:
        return devices
    elif one_device:
        if one_device not in devices:
            PTLogger.error("Invalid device name")
            exit(1)
        return [one_device]
    return []


def get_fw_device_id_from_name(name):
    """
    Retrieves the device id from the given firmware device name
    :param name: string, name of the device
    :return: integer, id of the device
    """
    if name not in FirmwareDeviceID.__members__:
        PTLogger.error("Invalid device name")
        exit(1)
    return FirmwareDeviceID[name].value


def main():
    args = parser.parse_args()
    PTLogger.setup_logging(
        "pt-firmware-updater",
        args.log_level,
        args.no_journal is False)

    if not is_root():
        PTLogger.error(
            "This program requires root privileges. Run as root using 'sudo'.")
        exit(1)

    devices = get_devices_to_update(args.all, args.device)
    for dev_name in devices:
        try:
            dev_id = get_fw_device_id_from_name(dev_name)
            PTLogger.info('Checking {} - id: {}'.format(dev_name, dev_id))
            fw_dev = FirmwareDevice(dev_id, DEFAULT_INTERVAL_SPEED)

            d = FirmwareUpdater(fw_dev)
            if d.update_available():
                d.install_updates()
        except (ConnectionError, AttributeError) as e:
            PTLogger.debug(str(e))
            continue
        except Exception as e:
            PTLogger.error(str(e))
            continue


if __name__ == '__main__':
    main()
