#!/usr/bin/python3

import os
from distutils.version import StrictVersion
from argparse import ArgumentParser
from sys import argv, exit, path
path.append("/usr/lib/pt-firmware-updater/")
from firmware_device import FirmwareDevice

parser = ArgumentParser(description="pi-top update checker")
parser.add_argument(
    "-a",
    "--addr",
    type=lambda x: int(x, 0),  # hex or int
    help="set the I2C address to target for upgrade",
    required=True,
)
parser.add_argument(
    "-f",
    "--file",
    type=str,
    help="path to firmware bin file",
)
parser.add_argument(
    "-i",
    "--interval",
    type=float,
    help="set the packet interval speed",
    default=0.1
)
parser.add_argument(
    "-y",
    "--yes",
    action="store_true",
    help="automatically install firmware without confirmation",
    default=False
)
parser.add_argument(
    "-t",
    "--test",
    action="store_true",
    help="only check if firmware ran successfully",
    default=False
)
parser.add_argument(
    "-v",
    "--verbose",
    action="store_true",
    help="print out debug information",
    default=False,
)

args = parser.parse_args()

device = FirmwareDevice(args.addr, args.interval)


part_no = device.get_part_number()
print("Part Number:", str(part_no))


sch_hardware_version_major = device.get_sch_hardware_version_major()
print("Target Board Number:", str(sch_hardware_version_major))


current_fw_version = device.get_fw_version()
print("Current Firmware Version:", str(current_fw_version))


def get_firmware_dir(part, board):
    return os.path.join(
        "/usr/lib/pt-firmware-updater/bin/",
        "p" + str(part),
        "b" + str(board),
    )


def get_latest_firmware_version_to_install(fw_path):
    if not os.path.exists(fw_path):
        print(fw_path, "Firmware path not found for device - exiting...")
        exit(1)

    latest_fw_version = None
    with os.scandir(fw_path) as i:
        for entry in i:
            if entry.is_file():
                if entry.name.endswith(".bin"):
                    # TODO: Extract version - check if it's the largest version
                    latest_fw_version = entry.name.replace(".bin", "")

    if latest_fw_version is None:
        print("No firmware found in firmware path", fw_path, "- exiting...")
        exit(1)

    return (latest_fw_version)


if not args.test:
    # if args.yes is None:
    #    TODO: ask user to confirm operation
    #    pass

    # TODO: If file specifically provided, check that file exists and attempt to force install
    fw_path = get_firmware_dir(part_no, sch_hardware_version_major)

    # TODO: debug_print("Searching in Firmware Path:", str(fw_path))
    fw_to_install = get_latest_firmware_version_to_install(fw_path)

    print("Firmware Version To Install:", str(fw_to_install))

    if StrictVersion(current_fw_version) >= StrictVersion(fw_to_install):
        print("Firmware version candidate is not newer than current firmware. Exiting...")
        exit(1)

    fw_file_path = os.path.join(fw_path, fw_to_install + ".bin")
    # TODO: debug_print("Firmware File Path:", str(fw_file_path))

    device.set_fw_file_to_install(fw_file_path)

    print("\n\nInstalling...")
    device.update_firmware()


print("\n\nVerifying firmware installed correctly...")
if device.fw_downloaded_successfully():

    print("SUCCESS")
    exit(0)

else:

    print("FAIL")
    exit(1)
