#!/usr/bin/python3

import os
from argparse import ArgumentParser
from sys import exit
from sys import path
from time import sleep

from ptcommon.common_ids import DeviceID
from ptcommon.firmware_device import FirmwareDevice
from ptcommon.logger import PTLogger
from ptcommon.sys_info import get_host_device_version
path.append("/usr/lib/pt-firmware-updater/")
from notification_manager import NotificationManager, UpdateStatusEnum
from firmware_device_manager import FirmwareDeviceManager


parser = ArgumentParser(description="pi-top firmware update checker")
parser.add_argument(
    "-a",
    "--all",
    action="store_true",
    help="Find all connected pi-top devices, and apply firmware upgrades "
         "if necessary",
)
parser.add_argument(
    "-d",
    "--device",
    type=str,
    help="Define specific pi-top firmware device to attempt to apply firmware"
         " upgrade to. This option is ignored if -a flag is used. "
         "Receives only one device name.",
    required=False
)
parser.add_argument(
    "--no-journal",
    help="Prints output to stdout instead of journal.",
    action="store_true"
)
parser.add_argument(
    "--log-level",
    type=int,
    help="Set the logging level from 10 (more verbose) to 50 (less verbose).",
    default=20,
)
parser.add_argument(
    "-i",
    "--interval",
    type=float,
    help="Set the interval speed at which packages will be sent to the device "
         "during an update.",
    default=0.1
)
parser.add_argument(
    "--loop-time",
    type=float,
    help="Sets the time interval in seconds that the script will wait before each update check.",
    default=-1
)


def is_root() -> bool:
    return os.geteuid() == 0


def main() -> None:
    args = parser.parse_args()
    PTLogger.setup_logging(
        "pt-firmware-updater",
        args.log_level,
        args.no_journal is False)

    if get_host_device_version() != DeviceID.pi_top_4.name:
        PTLogger.error("This program only runs on a pi-top[4]")
        exit(1)

    if not is_root():
        PTLogger.error(
            "This program requires root privileges. Run as root using 'sudo'.")
        exit(1)

    if args.all:
        devices = FirmwareDevice.valid_device_ids()
    else:
        devices = [FirmwareDevice.str_name_to_device_id(args.device)]

    fw_device_manager = FirmwareDeviceManager(devices)
    fw_device_manager.force_update_if_available()
    fw_device_manager.start_file_supervisor()

    while True:
        fw_device_manager.scan(packet_interval=args.interval)

        for device in fw_device_manager.connected_devices():
            if fw_device_manager.was_notified(device):
                PTLogger.info("{} - User already notified for updates. Skipping...".format(device))
                continue

            if fw_device_manager.has_update(device):
                # notify user about update
                fw_device_manager.set_notification_status(device, True)
                user_response = True  # store user response
                if user_response:
                    PTLogger.info('{} - User accepted update.'.format(device))
                    fw_device_manager.update(device)
                else:
                    PTLogger.info('{} - User rejected update. Skipping future checks...'.format(device))

        if fw_device_manager.new_files_in_folder():
            PTLogger.info('New binary files found. Will notify the user.')

        if args.loop_time < 0:
            break
        PTLogger.info('Sleeping for {} secs before next check.'.format(args.loop_time))
        sleep(args.loop_time)


if __name__ == '__main__':
    main()
