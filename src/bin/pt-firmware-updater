#!/usr/bin/python3

import os
from argparse import ArgumentParser
from sys import exit
from sys import path
from time import sleep

from ptcommon.common_ids import DeviceID
from ptcommon.firmware_device import FirmwareDevice, PTInvalidFirmwareDeviceException
from ptcommon.logger import PTLogger
from ptcommon.sys_info import get_host_device_version
path.append("/usr/lib/pt-firmware-updater/")
from firmware_updater import FirmwareUpdater, PTInvalidFirmwareFile, PTUpdatePending
from notification_manager import NotificationManager, UpdateStatusEnum


parser = ArgumentParser(description="pi-top firmware update checker")
parser.add_argument(
    "device",
    help="Define pi-top firmware device to apply firmware upgrade to.",
)
parser.add_argument(
    "--no-journal",
    help="Prints output to stdout instead of journal.",
    action="store_true"
)
parser.add_argument(
    "--log-level",
    type=int,
    help="Set the logging level from 10 (more verbose) to 50 (less verbose).",
    default=20,
)
parser.add_argument(
    "-i",
    "--interval",
    type=float,
    help="Set the interval speed at which packages will be sent to the device "
         "during an update.",
    default=0.1
)
parser.add_argument(
    "-p",
    "--path",
    type=str,
    help="Path to the binary file to install. If not provided, updates will be "
         "searched in system folders",
    default=""
)


def is_root() -> bool:
    return os.geteuid() == 0


def main() -> None:
    args = parser.parse_args()
    PTLogger.setup_logging(
        "pt-firmware-updater",
        args.log_level,
        args.no_journal is False)

    if get_host_device_version() != DeviceID.pi_top_4.name:
        PTLogger.error("This program only runs on a pi-top[4]")
        exit(1)

    if not is_root():
        PTLogger.error(
            "This program requires root privileges. Run as root using 'sudo'.")
        exit(1)

    if os.path.isdir(args.path):
        PTLogger.error("{} is a directory, not a file.".format(args.path))
        exit(1)

    notification_manager = NotificationManager()
    device_id = FirmwareDevice.str_name_to_device_id(args.device)
    PTLogger.info("Starting pt-firmware-updater")
    status = UpdateStatusEnum.FAILURE
    try:
        fw_dev = FirmwareDevice(device_id, args.interval)
        fw_updater = FirmwareUpdater(fw_dev)

        if args.path:
            fw_updater.verify_and_stage_file(args.path)
        else:
            fw_updater.search_updates()

        if fw_updater.has_staged_updates():
            PTLogger.info("{} - starting update process".format(device_id))
            fw_updater.install_updates()
            status = UpdateStatusEnum.SUCCESS
            PTLogger.info("{} - successfully updated".format(device_id))
    except (ConnectionError, AttributeError, PTInvalidFirmwareDeviceException, PTInvalidFirmwareFile, PTUpdatePending) as e:
        PTLogger.warning('{} - {}'.format(device_id, e))
    except Exception as e:
        PTLogger.error(str(e))

    notification_manager.notify_user(status, device_id)


if __name__ == '__main__':
    main()
