#!/usr/bin/python3

import os
from argparse import ArgumentParser
from sys import exit
from sys import path
from time import sleep

path.append("/usr/lib/pt-firmware-updater/")
from ptcommon.firmware_device import FirmwareDevice
from ptcommon.firmware_device import PTInvalidFirmwareDeviceException
from ptcommon.common_ids import FirmwareDeviceID
from ptcommon.logger import PTLogger
from firmware_updater import FirmwareUpdater
from notification_manager import NotificationManager
from notification_manager import UpdateStatusEnum


parser = ArgumentParser(description="pi-top firmware update checker")
parser.add_argument(
    "-a",
    "--all",
    action="store_true",
    help="Find all connected pi-top devices, and apply firmware upgrades "
         "if necessary",
)
parser.add_argument(
    "-d",
    "--device",
    type=str,
    help="Define specific pi-top firmware device to attempt to apply firmware"
         " upgrade to. This option is ignored if -a flag is used. "
         "Receives only one device name.",
    required=False
)
parser.add_argument(
    "--no-journal",
    help="Prints output to stdout instead of journal.",
    action="store_true"
)
parser.add_argument(
    "--log-level",
    type=int,
    help="Set the logging level from 10 (more verbose) to 50 (less verbose).",
    default=20,
)
parser.add_argument(
    "-i",
    "--interval",
    type=float,
    help="Set the interval speed at which packages will be sent to the device "
         "during an update.",
    default=0.1
)
parser.add_argument(
    "--loop-time",
    type=float,
    help="Sets the time interval in seconds that the script will wait before each update check.",
    default=-1
)


def is_root() -> bool:
    return os.geteuid() == 0


def str_name_to_device_id(str_name: str) -> FirmwareDeviceID:
    """
    Retrieves the device ID for a given firmware device's
    str name.
    :param str_name: a particular firmware device name.
    :return: Corresponding FirmwareDeviceID.
    """
    devices = FirmwareDevice.valid_device_ids()
    if str_name not in [d.name for d in devices]:
        PTLogger.error("Invalid device name")
        exit(1)
    return FirmwareDeviceID[str_name]


def main() -> None:
    args = parser.parse_args()
    PTLogger.setup_logging(
        "pt-firmware-updater",
        args.log_level,
        args.no_journal is False)

    if not is_root():
        PTLogger.error(
            "This program requires root privileges. Run as root using 'sudo'.")
        exit(1)

    if args.all:
        devices = FirmwareDevice.valid_device_ids()
    else:
        devices = [str_name_to_device_id(args.device)]

    notification_manager = NotificationManager()
    while True:
        for dev in devices:
            try:
                fw_dev = FirmwareDevice(dev, args.interval)
                fw_updater = FirmwareUpdater(fw_dev)
                if fw_updater.update_available():
                    notification_manager.notify_user(UpdateStatusEnum.WARNING, fw_dev.str_name)

                    status = UpdateStatusEnum.FAILURE
                    if fw_updater.install_updates():
                        status = UpdateStatusEnum.SUCCESS
                    notification_manager.notify_user(status, fw_dev.str_name)

            except (ConnectionError, AttributeError, PTInvalidFirmwareDeviceException) as e:
                PTLogger.warning('{} - {}'.format(dev.name, e))
                continue
            except Exception as e:
                PTLogger.error(str(e))
                continue

        if args.loop_time < 0:
            break
        PTLogger.info('Sleeping for {} secs before next check.'.format(args.loop_time))
        sleep(args.loop_time)


if __name__ == '__main__':
    main()
