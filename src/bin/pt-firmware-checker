#!/usr/bin/python3

from os import geteuid
from os.path import exists
from argparse import ArgumentParser
from sys import exit
from sys import path
from time import sleep

from ptcommon.common_ids import DeviceID
from ptcommon.firmware_device import FirmwareDevice
from ptcommon.logger import PTLogger
from ptcommon.sys_info import get_host_device_version
from ptcommon.lock import PTLock
path.append("/usr/lib/pt-firmware-updater/")
from firmware_device_manager import FirmwareDeviceManager


parser = ArgumentParser(description="pi-top firmware update checker")
parser.add_argument(
    "--no-journal",
    help="Prints output to stdout instead of journal.",
    action="store_true"
)
parser.add_argument(
    "--log-level",
    type=int,
    help="Set the logging level from 10 (more verbose) to 50 (less verbose).",
    default=20,
)
parser.add_argument(
    "--loop-time",
    type=int,
    help="Sets the time interval in seconds that the script will wait before each update check.",
    default=3,
    choices=range(1, 300)
)
parser.add_argument(
    "-f", "--force",
    help="Forces firmware update check and applies to all devices.",
    action="store_true"
)


def is_root() -> bool:
    return geteuid() == 0


def main() -> None:
    args = parser.parse_args()
    PTLogger.setup_logging(
        "pt-firmware-updater",
        args.log_level,
        args.no_journal is False)

    if get_host_device_version() != DeviceID.pi_top_4.name:
        PTLogger.error("This program only runs on a pi-top[4]")
        exit(1)

    if not is_root():
        PTLogger.error(
            "This program requires root privileges. Run as root using 'sudo'.")
        exit(1)

    fw_device_manager = FirmwareDeviceManager(
        FirmwareDevice.valid_device_ids())

    if args.force:
        fw_device_manager.force_update_if_available()
        exit(0)

    fw_device_manager.start_file_supervisor()
    lock_file = PTLock('pt-firmware-updater')
    while True:
        if lock_file.is_locked():
            PTLogger.info("Waiting for lock to be released")
        else:
            fw_device_manager.scan_for_connected_devices()

            for device_id in fw_device_manager.connected_devices():
                if fw_device_manager.already_notified_this_session(device_id):
                    PTLogger.info("{} - User already notified for updates. Skipping...".format(device_id))
                    continue

                if fw_device_manager.has_update(device_id):
                    fw_device_manager.notify_user_about_update(device_id)

            fw_device_manager.update_notification_states_for_new_firmware_files()

        PTLogger.debug('Sleeping for {} secs before next check.'.format(args.loop_time))
        sleep(args.loop_time)


if __name__ == '__main__':
    main()
