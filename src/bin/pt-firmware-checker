#!/usr/bin/python3

from argparse import ArgumentParser
from os import geteuid
from sys import exit, path

from pitop.common.logger import PTLogger
from pitop.system import device_type

path.append("/usr/lib/pt-firmware-updater/")
import pt_firmware_checker  # noqa: E402


parser = ArgumentParser(description="pi-top firmware update checker")

parser.add_argument(
    "--log-level",
    type=int,
    help="Set the logging level from 10 (more verbose) to 50 (less verbose).",
    default=20,
)
parser.add_argument(
    "--loop-time",
    type=int,
    help="Sets the time interval in seconds that the script will wait before each update check.",
    default=3,
    choices=range(1, 300)
)
parser.add_argument(
    "-f", "--force",
    help="Forces firmware update check and applies to all devices.",
    action="store_true"
)
parser.add_argument(
    "-t", "--wait-timeout",
    type=int,
    help="Amount of time (in seconds) to wait for web portal to report that firmware updates can start, excluding an OS (system packages) upgrade.",
    default=300,
    choices=range(0, 999)
)
parser.add_argument(
    "-m", "--max-wait-timeout",
    type=int,
    help="Maximum time (in seconds) to wait for web portal to report that firmware updates can start, including an OS (system packages) upgrade.",
    default=3600,
    choices=range(0, 9999)
)


def is_root() -> bool:
    return geteuid() == 0


if __name__ == '__main__':
    if device_type() != "pi-top [4]":
        PTLogger.error("This program only runs on a pi-top [4]")
        exit(0)

    if not is_root():
        PTLogger.error("This program requires root privileges. Run as root using 'sudo'.")
        exit(1)

    parsed_args = parser.parse_args()
    PTLogger.setup_logging(logger_name="pt-firmware-updater",
                           logging_level=parsed_args.log_level, log_to_journal=False)
    try:
        pt_firmware_checker.main(parsed_args)
    except Exception as e:
        PTLogger.error(f"{e}")
        exit(1)
